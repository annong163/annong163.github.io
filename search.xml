<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql 各类日期函数的使用</title>
      <link href="/2022/04/27/mysql-date/"/>
      <url>/2022/04/27/mysql-date/</url>
      
        <content type="html"><![CDATA[<ul><li><p>今天</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 【想要的字段】 <span class="token keyword">FROM</span> 【表名】 WHERETO_DAYS<span class="token punctuation">(</span>【时间字段名】<span class="token punctuation">)</span> <span class="token operator">=</span>TO_DAYS<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>昨天</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 【想要的字段】 <span class="token keyword">FROM</span> 【表名】 <span class="token keyword">WHERE</span> TO_DAYS<span class="token punctuation">(</span> <span class="token function">NOW</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">-</span> TO_DAYS<span class="token punctuation">(</span>【时间字段名】<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></li><li><p>近七天</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 【想要的字段】 <span class="token keyword">FROM</span> 【表名】 <span class="token keyword">WHERE</span> DATE_SUB<span class="token punctuation">(</span>CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> INTERVAL <span class="token number">7</span> DAY<span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token keyword">DATE</span><span class="token punctuation">(</span>【时间字段名】<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>本周内</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 【想要的字段】 <span class="token keyword">FROM</span> 【表名】 <span class="token keyword">WHERE</span> YEARWEEK<span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span>【时间字段名】<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> YEARWEEK<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>上一周</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 【想要的字段】 <span class="token keyword">FROM</span> 【表名】 <span class="token keyword">WHERE</span> YEARWEEK<span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span>【时间字段名】<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> YEARWEEK<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre></li><li><p>30天内 注意这个不是本月是从当天起向前推30天</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 【想要的字段】 <span class="token keyword">FROM</span> 【表名】 <span class="token keyword">WHERE</span> DATE_SUB<span class="token punctuation">(</span>CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> INTERVAL <span class="token number">30</span> DAY<span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token keyword">DATE</span><span class="token punctuation">(</span>【时间字段名】<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>本月</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 【想要的字段】 <span class="token keyword">FROM</span> 【表名】 <span class="token keyword">WHERE</span> DATE_FORMAT<span class="token punctuation">(</span> 【时间字段名】<span class="token punctuation">,</span> <span class="token string">'%Y%m'</span> <span class="token punctuation">)</span> <span class="token operator">=</span> DATE_FORMAT<span class="token punctuation">(</span> CURDATE<span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token string">'%Y%m'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>上一个月</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 【想要的字段】 <span class="token keyword">FROM</span> 【表名】 <span class="token keyword">WHERE</span> PERIOD_DIFF<span class="token punctuation">(</span> DATE_FORMAT<span class="token punctuation">(</span> <span class="token function">now</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token string">'%Y%m'</span> <span class="token punctuation">)</span> <span class="token punctuation">,</span> DATE_FORMAT<span class="token punctuation">(</span> 【时间字段名】<span class="token punctuation">,</span> <span class="token string">'%Y%m'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre></li><li><p>本季度</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 【想要的字段】 <span class="token keyword">FROM</span> 【表名】 <span class="token keyword">WHERE</span> QUARTER<span class="token punctuation">(</span>【时间字段名】<span class="token punctuation">)</span><span class="token operator">=</span>QUARTER<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>上一季度</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 【想要的字段】 <span class="token keyword">FROM</span> 【表名】 <span class="token keyword">WHERE</span> QUARTER<span class="token punctuation">(</span>【时间字段名】<span class="token punctuation">)</span><span class="token operator">=</span>QUARTER<span class="token punctuation">(</span>DATE_SUB<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>interval <span class="token number">1</span> QUARTER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>本年度</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 【想要的字段】 <span class="token keyword">FROM</span> 【表名】 <span class="token keyword">WHERE</span> YEAR<span class="token punctuation">(</span>【时间字段名】<span class="token punctuation">)</span><span class="token operator">=</span>YEAR<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>上一年度</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 【想要的字段】 <span class="token keyword">FROM</span> 【表名】 WHEREYEAR<span class="token punctuation">(</span>【时间字段名】<span class="token punctuation">)</span><span class="token operator">=</span>YEAR<span class="token punctuation">(</span>date_sub<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>interval 1YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><blockquote><p>日期函数说明：<br><br>TO_DAYS() 将日期参数返回转换为天，给定一个日期date，返回一个日期号码（自0年以来的天数）。<br>NOW() 函数返回当前的日期和时间。<br>CURDATE() 函数返回当前的日期，是日期不是时间<br>DATE_SUB(current,INTERVAL 【N】 DAY) 将current向前推 N天<br>DATE_ADD(current,INTERVAL 【N】 DAY) 将current向后推 N天<br>YEARWEEK 是获取年份和周数的一个函数，函数形式为 YEARWEEK(date[,mode])<br>DATE_FORMAT( article_last_update, ‘%Y%m’ ) 按照格式 格式化时间字符串<br>QUARTER(date) 返回日期的一年中的季度，范围为1到4。<br>YEAR(date) 返回日期的年份，范围为1000到9999，或者对于“零”日期返回0。<br>MONTH(date) 返回日期的月份，1月至12月的范围为1至12，对于包含月份为零的日期（如“0000-00-00”或“2008-00-00”），返回0。<br>WEEK(date[,mode]) 此函数返回日期的周号。 WEEK()的双参数使您能够指定星期是从星期天还是星期一开始，以及返回值是在0到53还是从1到53的范围内。如果省略mode参数，则值 使用了default_week_format系统变量。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue将页面导出为Excel</title>
      <link href="/2022/04/27/vue-jiang-ye-mian-dao-chu-wei-excel/"/>
      <url>/2022/04/27/vue-jiang-ye-mian-dao-chu-wei-excel/</url>
      
        <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>整合jquery插件table2excel.js ，并且修改部分源码支持自定义文件名、自定义sheet工作表名称、表格自动添加边框。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>项目中有许多报表之类的统计 涉及表格跨行跨列较多故无法使用xlsx导出（因为需要一行一行处理跨行跨列），所以在Vue中整合了 jquery插件table2excel.js ，并且修改了部分源码支持自定义文件名、自定义sheet工作表名称、表格自动添加边框。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/img/%E5%AF%BC%E5%87%BA%E4%B8%BAexcel1.png"><br><img src="/img/%E5%AF%BC%E5%87%BA%E4%B8%BAexcel2.png"></p><h2 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h2><h3 id="1-首先需要在Vue中引入jquery"><a href="#1-首先需要在Vue中引入jquery" class="headerlink" title="1.首先需要在Vue中引入jquery"></a>1.首先需要在Vue中引入jquery</h3><pre class=" language-javascript"><code class="language-javascript"> npm install jquery</code></pre><h3 id="2-将下载好的table2excel放到项目中-比如我们用的antd脚手架直接放到util下-下载链接在文末"><a href="#2-将下载好的table2excel放到项目中-比如我们用的antd脚手架直接放到util下-下载链接在文末" class="headerlink" title="2.将下载好的table2excel放到项目中 比如我们用的antd脚手架直接放到util下(下载链接在文末)"></a>2.将下载好的table2excel放到项目中 比如我们用的antd脚手架直接放到util下(下载链接在文末)</h3><p><img src="/img/%E5%AF%BC%E5%87%BA%E4%B8%BAexcel3.png"></p><h3 id="3-修改table2excel源码，在第一行引入Vue中的jquery-（最新文件已设置完毕，可忽略）"><a href="#3-修改table2excel源码，在第一行引入Vue中的jquery-（最新文件已设置完毕，可忽略）" class="headerlink" title="3.修改table2excel源码，在第一行引入Vue中的jquery （最新文件已设置完毕，可忽略）"></a>3.修改table2excel源码，在第一行引入Vue中的jquery （最新文件已设置完毕，可忽略）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> jQuery <span class="token keyword">from</span> <span class="token string">'jquery'</span></code></pre><h3 id="4-在项目入口main-js中引入"><a href="#4-在项目入口main-js中引入" class="headerlink" title="4.在项目入口main.js中引入"></a>4.在项目入口main.js中引入</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'./utils/table2excel'</span> <span class="token comment" spellcheck="true">// global table2excel</span></code></pre><h3 id="5-在demo-vue中使用table2excel"><a href="#5-在demo-vue中使用table2excel" class="headerlink" title="5.在demo.vue中使用table2excel"></a>5.在demo.vue中使用table2excel</h3><h4 id="5-1-引入jquery"><a href="#5-1-引入jquery" class="headerlink" title="5.1 引入jquery"></a>5.1 引入jquery</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">'jquery'</span></code></pre><h4 id="5-2-table中加入id"><a href="#5-2-table中加入id" class="headerlink" title="5.2 table中加入id"></a>5.2 table中加入id</h4><p><img src="/img/%E5%AF%BC%E5%87%BA%E4%B8%BAexcel4.png"></p><h4 id="5-3-在methods方法中使用"><a href="#5-3-在methods方法中使用" class="headerlink" title="5.3 在methods方法中使用"></a>5.3 在methods方法中使用</h4><pre class=" language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">exportExcel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#aTable"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">table2excel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         exclude<span class="token punctuation">:</span> <span class="token string">".noExl"</span><span class="token punctuation">,</span>         sheetName<span class="token punctuation">:</span> <span class="token string">"八项数据管控"</span><span class="token punctuation">,</span>         filename<span class="token punctuation">:</span> <span class="token string">"八项数据管控"</span><span class="token punctuation">,</span>         exclude_img<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         exclude_links<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         exclude_inputs<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><p><a href="https://annong.lanzous.com/iDU8jnarhah">https://annong.lanzous.com/iDU8jnarhah</a></p>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE组件 </tag>
            
            <tag> Ant Design Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java自定义编号生成</title>
      <link href="/2022/04/27/zi-ding-yi-bian-hao/"/>
      <url>/2022/04/27/zi-ding-yi-bian-hao/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>工作中要求合同编号自动生成 格式 NYZL-001，NYZL-002。。。在我的StringUtils工具类中新增如下方法，该方法可以自定义前缀以及当前排到数字几了（可从数据库中查询最大的编号+1）</p><h2 id="方法一：自定义前缀代码"><a href="#方法一：自定义前缀代码" class="headerlink" title="方法一：自定义前缀代码"></a>方法一：自定义前缀代码</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/**     * 自动生成编号     * @param prefix  前缀，往往是一串字符串     * @param nowNum  当前要生成的数字     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> synchronized String <span class="token function">getConteactNo</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">,</span>int nowNum <span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AtomicInteger count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span>nowNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4位数字的采取编号处理。9999的情况下从001开始采取。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">9999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 采用4位数的数字进行序号处理。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// num.append("00").append(count.getAndIncrement());</span>            num<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// num.append(count.getAndIncrement());</span>            num<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            num<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 组合。</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>incrementAndGet   返回加1后的新值<br/><br>getAndIncrement   返回旧值（即加1前的原始值)</p></blockquote><h2 id="方法二：自动递增返回位数字符串"><a href="#方法二：自动递增返回位数字符串" class="headerlink" title="方法二：自动递增返回位数字符串"></a>方法二：自动递增返回位数字符串</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicNumUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 递增生成 0000001 格式 线程安全     *     * @param nowNum  当前数值     * @param miniMum 生成的最小位数(自动补零)     * @return 返回值 = 当前值 + 1     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> synchronized String <span class="token function">getSn</span><span class="token punctuation">(</span>Integer nowNum<span class="token punctuation">,</span> Integer miniMum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        NumberFormat formatter <span class="token operator">=</span> NumberFormat<span class="token punctuation">.</span><span class="token function">getNumberInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 整数显示最少位数不足前面补零</span>        formatter<span class="token punctuation">.</span><span class="token function">setMinimumIntegerDigits</span><span class="token punctuation">(</span>miniMum<span class="token punctuation">)</span><span class="token punctuation">;</span>        formatter<span class="token punctuation">.</span><span class="token function">setGroupingUsed</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AtomicInteger count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span>nowNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue在线接口调试组件</title>
      <link href="/2022/04/27/vue-zai-xian-jie-kou-diao-shi-zu-jian/"/>
      <url>/2022/04/27/vue-zai-xian-jie-kou-diao-shi-zu-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/img/%E5%9C%A8%E7%BA%BF%E8%B0%83%E8%AF%95%E7%BB%84%E4%BB%B6.png"></p><h2 id="组件-InterfaceTest-vue"><a href="#组件-InterfaceTest-vue" class="headerlink" title="组件: InterfaceTest.vue"></a>组件: InterfaceTest.vue</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>a<span class="token operator">-</span>drawer    title<span class="token operator">=</span><span class="token string">"在线接口测试"</span>    width<span class="token operator">=</span><span class="token string">"60%"</span>    placement<span class="token operator">=</span><span class="token string">"right"</span>    @close<span class="token operator">=</span><span class="token string">"close"</span>    <span class="token punctuation">:</span>destroy<span class="token operator">-</span>on<span class="token operator">-</span>close<span class="token operator">=</span><span class="token string">"true"</span>    <span class="token punctuation">:</span>visible<span class="token operator">=</span><span class="token string">"visible"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>card <span class="token punctuation">:</span>bordered<span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>row style<span class="token operator">=</span><span class="token string">"margin-top: 20px"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>col <span class="token punctuation">:</span>md<span class="token operator">=</span><span class="token string">"2"</span> <span class="token punctuation">:</span>sm<span class="token operator">=</span><span class="token string">"4"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>select style<span class="token operator">=</span><span class="token string">"width: 90px"</span> size<span class="token operator">=</span><span class="token string">"large"</span> <span class="token keyword">default</span><span class="token operator">-</span>value<span class="token operator">=</span><span class="token string">"GET"</span> disabled<span class="token operator">></span>            <span class="token operator">&lt;</span>a<span class="token operator">-</span>select<span class="token operator">-</span>option value<span class="token operator">=</span><span class="token string">"GET"</span><span class="token operator">></span>GET<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>select<span class="token operator">-</span>option<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>select<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>col<span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>col <span class="token punctuation">:</span>md<span class="token operator">=</span><span class="token string">"22"</span> <span class="token punctuation">:</span>sm<span class="token operator">=</span><span class="token string">"20"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>input<span class="token operator">-</span>search            placeholder<span class="token operator">=</span><span class="token string">"input send url"</span>            v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"tokenUrl"</span>            <span class="token punctuation">:</span>expand<span class="token operator">-</span>depth<span class="token operator">=</span><span class="token string">"5"</span>            @search<span class="token operator">=</span><span class="token string">"onSearch"</span>            enterButton<span class="token operator">=</span><span class="token string">"获 取 token"</span>            size<span class="token operator">=</span><span class="token string">"large"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>col<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>row<span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>row style<span class="token operator">=</span><span class="token string">"margin-top: 20px"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>col <span class="token punctuation">:</span>md<span class="token operator">=</span><span class="token string">"2"</span> <span class="token punctuation">:</span>sm<span class="token operator">=</span><span class="token string">"4"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>select style<span class="token operator">=</span><span class="token string">"width: 90px"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"requestMethod"</span> size<span class="token operator">=</span><span class="token string">"large"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>a<span class="token operator">-</span>select<span class="token operator">-</span>option value<span class="token operator">=</span><span class="token string">"GET"</span><span class="token operator">></span>GET<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>select<span class="token operator">-</span>option<span class="token operator">></span>            <span class="token operator">&lt;</span>a<span class="token operator">-</span>select<span class="token operator">-</span>option value<span class="token operator">=</span><span class="token string">"POST"</span><span class="token operator">></span>POST<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>select<span class="token operator">-</span>option<span class="token operator">></span>            <span class="token operator">&lt;</span>a<span class="token operator">-</span>select<span class="token operator">-</span>option value<span class="token operator">=</span><span class="token string">"PUT"</span><span class="token operator">></span>PUT<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>select<span class="token operator">-</span>option<span class="token operator">></span>            <span class="token operator">&lt;</span>a<span class="token operator">-</span>select<span class="token operator">-</span>option value<span class="token operator">=</span><span class="token string">"DELETE"</span><span class="token operator">></span>DELETE<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>select<span class="token operator">-</span>option<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>select<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>col<span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>col <span class="token punctuation">:</span>md<span class="token operator">=</span><span class="token string">"22"</span> <span class="token punctuation">:</span>sm<span class="token operator">=</span><span class="token string">"20"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>input<span class="token operator">-</span>search            placeholder<span class="token operator">=</span><span class="token string">"input send url"</span>            v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"url"</span>            <span class="token punctuation">:</span>expand<span class="token operator">-</span>depth<span class="token operator">=</span><span class="token string">"5"</span>            @search<span class="token operator">=</span><span class="token string">"onSearch"</span>            enterButton<span class="token operator">=</span><span class="token string">"发 送 请 求"</span>            size<span class="token operator">=</span><span class="token string">"large"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>col<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>row<span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>tabs defaultActiveKey<span class="token operator">=</span><span class="token string">"2"</span> style<span class="token operator">=</span><span class="token string">"margin-top: 10px"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>tab<span class="token operator">-</span>pane tab<span class="token operator">=</span><span class="token string">"Params"</span> key<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>textarea style<span class="token operator">=</span><span class="token string">"width:100%;font-size: 16px;font-weight:500;height: 300px;resize: none;"</span> @blur<span class="token operator">=</span><span class="token string">"changeVal"</span> <span class="token punctuation">:</span>placeholder<span class="token operator">=</span><span class="token string">"paramsPlace"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>textarea<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>tab<span class="token operator">-</span>pane<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>tabs<span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>tabs defaultActiveKey<span class="token operator">=</span><span class="token string">"1"</span> style<span class="token operator">=</span><span class="token string">"margin-top: 10px"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>tab<span class="token operator">-</span>pane tab<span class="token operator">=</span><span class="token string">"Response"</span> key<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>json<span class="token operator">-</span>viewer            style<span class="token operator">=</span><span class="token string">"background-color: #E9EBFE;min-height: 300px;"</span>            <span class="token punctuation">:</span>value<span class="token operator">=</span><span class="token string">"resultJson"</span>            boxed<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>json<span class="token operator">-</span>viewer<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>tab<span class="token operator">-</span>pane<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>tabs<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>card<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>drawer<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> axios <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'FlowTest'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        url<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        tokenStr<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        tokenUrl<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        paramJson<span class="token punctuation">:</span> <span class="token string">'参数转换后对应的JSON'</span><span class="token punctuation">,</span>        paramsPlace<span class="token punctuation">:</span> <span class="token string">'{\n“key1” : “value1”,\n“key2” : value2\n}'</span><span class="token punctuation">,</span>        visible<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        resultJson<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        requestMethod<span class="token punctuation">:</span> <span class="token string">'GET'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">show</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>VUE_APP_API_BASE_URL <span class="token operator">+</span> record<span class="token punctuation">.</span>address        <span class="token keyword">this</span><span class="token punctuation">.</span>tokenUrl <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>VUE_APP_API_BASE_URL <span class="token operator">+</span> <span class="token string">'/openApi/refreshToken/'</span> <span class="token operator">+</span> record<span class="token punctuation">.</span>appId <span class="token operator">+</span> <span class="token string">'/lzjy@2021!'</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>requestMethod <span class="token operator">=</span> record<span class="token punctuation">.</span>method_dictText        <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      onSearch <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          that<span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'请填写路径'</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>resultJson <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>tokenStr<span class="token punctuation">)</span>        <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>              <span class="token string">'Access-Token'</span><span class="token punctuation">:</span> that<span class="token punctuation">.</span>tokenStr            <span class="token punctuation">}</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span> value<span class="token punctuation">,</span>            method<span class="token punctuation">:</span> that<span class="token punctuation">.</span>requestMethod<span class="token punctuation">,</span>            data<span class="token punctuation">:</span> that<span class="token punctuation">.</span>paramJson<span class="token punctuation">,</span>            params<span class="token punctuation">:</span> that<span class="token punctuation">.</span>paramJson          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            that<span class="token punctuation">.</span>resultJson <span class="token operator">=</span> res            <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'refreshToken'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              that<span class="token punctuation">.</span>tokenStr <span class="token operator">=</span> res<span class="token punctuation">.</span>result              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'***********'</span> <span class="token operator">+</span> that<span class="token punctuation">.</span>tokenStr<span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            that<span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'请求异常：'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">changeVal</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> json <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>json<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>          <span class="token punctuation">}</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>paramJson <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'非法的JSON字符串'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      close <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>resultJson <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>paramJson <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE组件 </tag>
            
            <tag> Ant Design Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql分组统计最近七天数据，无则补零</title>
      <link href="/2022/04/27/mysql-group/"/>
      <url>/2022/04/27/mysql-group/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java">SELECT  <span class="token function">DATE_FORMAT</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>timeDay<span class="token punctuation">,</span> <span class="token string">'%m-%d'</span><span class="token punctuation">)</span> AS time<span class="token punctuation">,</span>  <span class="token function">IFNULL</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>success<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> AS success<span class="token punctuation">,</span>  <span class="token function">IFNULL</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>fail<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> AS fail<span class="token function">FROM</span>  <span class="token punctuation">(</span>    SELECT      <span class="token function">curdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> AS timeDay    UNION ALL    SELECT      <span class="token function">date_sub</span><span class="token punctuation">(</span><span class="token function">curdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> INTERVAL <span class="token number">1</span> DAY<span class="token punctuation">)</span> AS timeDay    UNION ALL    SELECT      <span class="token function">date_sub</span><span class="token punctuation">(</span><span class="token function">curdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> INTERVAL <span class="token number">2</span> DAY<span class="token punctuation">)</span> AS timeDay    UNION ALL    SELECT      <span class="token function">date_sub</span><span class="token punctuation">(</span><span class="token function">curdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> INTERVAL <span class="token number">3</span> DAY<span class="token punctuation">)</span> AS timeDay    UNION ALL    SELECT      <span class="token function">date_sub</span><span class="token punctuation">(</span><span class="token function">curdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> INTERVAL <span class="token number">4</span> DAY<span class="token punctuation">)</span> AS timeDay    UNION ALL    SELECT      <span class="token function">date_sub</span><span class="token punctuation">(</span><span class="token function">curdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> INTERVAL <span class="token number">5</span> DAY<span class="token punctuation">)</span> AS timeDay    UNION ALL    SELECT      <span class="token function">date_sub</span><span class="token punctuation">(</span><span class="token function">curdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> INTERVAL <span class="token number">6</span> DAY<span class="token punctuation">)</span> AS timeDay  <span class="token punctuation">)</span> a  LEFT <span class="token function">JOIN</span> <span class="token punctuation">(</span>    SELECT      <span class="token function">date</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>last_execute_date<span class="token punctuation">)</span> AS time<span class="token punctuation">,</span>      <span class="token function">sum</span><span class="token punctuation">(</span>        CASE          WHEN d<span class="token punctuation">.</span>execute_status <span class="token operator">=</span> <span class="token string">'3'</span> THEN <span class="token number">1</span>          ELSE <span class="token number">0</span>        END      <span class="token punctuation">)</span> AS success<span class="token punctuation">,</span>      <span class="token function">sum</span><span class="token punctuation">(</span>        CASE          WHEN d<span class="token punctuation">.</span>execute_status <span class="token operator">=</span> <span class="token string">'4'</span> THEN <span class="token number">1</span>          ELSE <span class="token number">0</span>        END      <span class="token punctuation">)</span> AS fail    FROM      data_collect d    GROUP BY      <span class="token function">date</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>last_execute_date<span class="token punctuation">)</span>  <span class="token punctuation">)</span> b ON a<span class="token punctuation">.</span>timeDay <span class="token operator">=</span> b<span class="token punctuation">.</span>timeORDER BY  time</code></pre>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK8—Stream集合操作快速上手</title>
      <link href="/2022/04/26/stream/"/>
      <url>/2022/04/26/stream/</url>
      
        <content type="html"><![CDATA[<h2 id="Stream简介"><a href="#Stream简介" class="headerlink" title="Stream简介"></a>Stream简介</h2><ul><li>Java 8引入了全新的Stream API。这里的Stream和I/O流不同，它更像具有Iterable的集合类，但行为和集合类又有所不同。</li><li>stream是对集合对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作，或者大批量数据操作。</li><li>只要给出需要对其包含的元素执行什么操作，比如 “过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream 会隐式地在内部进行遍历，做出相应的数据转换。</li></ul><h2 id="为什么要使用Stream"><a href="#为什么要使用Stream" class="headerlink" title="为什么要使用Stream"></a>为什么要使用Stream</h2><ul><li>函数式编程带来的好处尤为明显。这种代码更多地表达了业务逻辑的意图，而不是它的实现机制。易读的代码也易于维护、更可靠、更不容易出错。</li><li>高端 (▼へ▼メ)</li></ul><h2 id="实例数据源"><a href="#实例数据源" class="headerlink" title="实例数据源"></a>实例数据源</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> list <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        PersonModel wu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonModel</span><span class="token punctuation">(</span><span class="token string">"wu qi"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PersonModel zhang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonModel</span><span class="token punctuation">(</span><span class="token string">"zhang san"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PersonModel wang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonModel</span><span class="token punctuation">(</span><span class="token string">"wang si"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PersonModel zhao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonModel</span><span class="token punctuation">(</span><span class="token string">"zhao wu"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PersonModel chen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonModel</span><span class="token punctuation">(</span><span class="token string">"chen liu"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>wu<span class="token punctuation">,</span> zhang<span class="token punctuation">,</span> wang<span class="token punctuation">,</span> zhao<span class="token punctuation">,</span> chen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><ul><li><p>遍历数据并检查其中的元素时使用。</p></li><li><p>filter接受一个函数作为参数，该函数用Lambda表达式表示。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * 过滤所有的男性   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fiterSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> data <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//old</span>      List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> temp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>PersonModel person<span class="token operator">:</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//new</span>      List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> collect <span class="token operator">=</span> data              <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>person <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"男"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 过滤所有的男性 并且小于20岁   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fiterSexAndAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> data <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//old</span>      List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> temp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>PersonModel person<span class="token operator">:</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//new 1</span>      List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> collect <span class="token operator">=</span> data              <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>person <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//new 2</span>      List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> collect1 <span class="token operator">=</span> data              <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>person <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ul><li><p>map生成的是个一对一映射,for的作用</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">/**   * 取出所有的用户名字   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getUserNameList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> data <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//old</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>PersonModel persion<span class="token punctuation">:</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>persion<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//new 1</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> collect <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>person <span class="token operator">-</span><span class="token operator">></span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//new 2</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> collect1 <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>PersonModel<span class="token punctuation">:</span><span class="token punctuation">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//new 3</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> collect2 <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>person <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h2><ul><li><p>感觉类似递归</p></li><li><p>数字(字符串)累加</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reduceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//累加，初始化值是 10</span>      Integer reduce <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count:"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"item:"</span><span class="token operator">+</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> count <span class="token operator">+</span> item<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">)</span><span class="token punctuation">;</span>      Integer reduce1 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce1<span class="token punctuation">)</span><span class="token punctuation">;</span>      String reduce2 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="Collect"><a href="#Collect" class="headerlink" title="Collect"></a>Collect</h2><ul><li><p>collect在流中生成列表，map，等常用的数据结构</p></li><li><p>toList()</p></li><li><p>toSet()</p></li><li><p>toMap()</p></li><li><p>自定义</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/**   * toList   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">toListTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> data <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> collect <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>PersonModel<span class="token punctuation">:</span><span class="token punctuation">:</span>getName<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * toSet   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">toSetTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> data <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Set<span class="token operator">&lt;</span>String<span class="token operator">></span> collect <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>PersonModel<span class="token punctuation">:</span><span class="token punctuation">:</span>getName<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * toMap   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">toMapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> data <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> collect <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>                      Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>PersonModel<span class="token punctuation">:</span><span class="token punctuation">:</span>getName<span class="token punctuation">,</span> PersonModel<span class="token punctuation">:</span><span class="token punctuation">:</span>getAge<span class="token punctuation">)</span>              <span class="token punctuation">)</span><span class="token punctuation">;</span>      data<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>per<span class="token operator">-</span><span class="token operator">></span>per<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          <span class="token keyword">return</span> value<span class="token operator">+</span><span class="token string">"1"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 指定类型   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">toTreeSetTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> data <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      TreeSet<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> collect <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span>TreeSet<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 分组   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">toGroupTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> data <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Map<span class="token operator">&lt;</span>Boolean<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span><span class="token operator">></span> collect <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>per <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"男"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>per<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 分隔   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">toJoiningTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> data <span class="token operator">=</span> Data<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String collect <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>personModel <span class="token operator">-</span><span class="token operator">></span> personModel<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"{"</span><span class="token punctuation">,</span> <span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 自定义   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> collect <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>              Collectors<span class="token punctuation">.</span><span class="token function">reducing</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">-</span><span class="token operator">></span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                  y<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> y<span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><ul><li>Optional 是为核心类库新设计的一个数据类型，用来替换 null 值。</li><li>人们对原有的 null 值有很多抱怨，甚至连发明这一概念的Tony Hoare也是如此，他曾说这是自己的一个“价值连城的错误”</li><li>用处很广，不光在lambda中，哪都能用</li><li>Optional.of(T)，T为非空，否则初始化报错</li><li>Optional.ofNullable(T)，T为任意，可以为空</li><li>isPresent()，相当于 ！=null</li><li>ifPresent(T)， T可以是一段lambda表达式 ，或者其他代码，非空则执行</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PersonModel personModel<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PersonModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对象为空则打出 -</span>        Optional<span class="token operator">&lt;</span>Object<span class="token operator">></span> o <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span>personModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>o<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//名称为空则打出 -</span>        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> name <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>personModel<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>name<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果不为空，则打出xxx</span>        Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>na<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>na<span class="token operator">+</span><span class="token string">"ifPresent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果空，则返回指定字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果空，则返回 指定方法，或者代码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"hahah"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"hahah"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果空，则可以抛出异常</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Objects.requireNonNull(null,"is null");</span>        <span class="token comment" spellcheck="true">//利用 Optional 进行多级判断</span>        EarthModel earthModel1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EarthModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//old</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>earthModel1<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>earthModel1<span class="token punctuation">.</span><span class="token function">getTea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//...</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//new</span>        Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>earthModel1<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>EarthModel<span class="token punctuation">:</span><span class="token punctuation">:</span>getTea<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>TeaModel<span class="token punctuation">:</span><span class="token punctuation">:</span>getType<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Optional&lt;EarthModel> earthModel = Optional.ofNullable(new EarthModel());</span><span class="token comment" spellcheck="true">//        Optional&lt;List&lt;PersonModel>> personModels = earthModel.map(EarthModel::getPersonModels);</span><span class="token comment" spellcheck="true">//        Optional&lt;Stream&lt;String>> stringStream = personModels.map(per -> per.stream().map(PersonModel::getName));</span>        <span class="token comment" spellcheck="true">//判断对象中的list</span>        Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EarthModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>EarthModel<span class="token punctuation">:</span><span class="token punctuation">:</span>getPersonModels<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>pers<span class="token operator">-</span><span class="token operator">></span>pers                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>PersonModel<span class="token punctuation">:</span><span class="token punctuation">:</span>getName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>per<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>PersonModel<span class="token operator">></span> models<span class="token operator">=</span>Data<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>models<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>per <span class="token operator">-</span><span class="token operator">></span> per                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>PersonModel<span class="token punctuation">:</span><span class="token punctuation">:</span>getName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>per<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token template-string"><span class="token string">`## 并发- stream替换成parallelStream或 parallel- 输入流的大小并不是决定并行化是否会带来速度提升的唯一因素，性能还会受到编写代码的方式和核的数量的影响- 影响性能的五要素是:数据大小、源数据结构、值是否装箱、可用的CPU核数量，以及处理每个元素所花的时间`</span></span><span class="token template-string"><span class="token string">``</span></span>javascript <span class="token comment" spellcheck="true">//根据数字的大小，有不同的结果</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> int size<span class="token operator">=</span><span class="token number">10000000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------List-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------Set-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试list     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> temp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//老的</span>        long start<span class="token operator">=</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i<span class="token punctuation">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//同步</span>        long start1<span class="token operator">=</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//并发</span>        long start2<span class="token operator">=</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试set     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> temp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//老的</span>        long start<span class="token operator">=</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i<span class="token punctuation">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//同步</span>        long start1<span class="token operator">=</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//并发</span>        long start2<span class="token operator">=</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK8 </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
